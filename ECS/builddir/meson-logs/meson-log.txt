Build started at 2022-06-12T13:13:25.965107
Main binary: /opt/brew/Cellar/meson/0.62.2/libexec/bin/python3.10
Build Options: -Dbackend=ninja
Python system: Darwin
The Meson build system
Version: 0.62.2
Source dir: /Users/kyle/git/cppong/ECS
Build dir: /Users/kyle/git/cppong/ECS/builddir
Build type: native build
Project name: main
Project version: 0.0.1
C++ compiler for the host machine: c++ (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C++ linker for the host machine: c++ ld64 764
C++ compiler for the build machine: c++ (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C++ linker for the build machine: c++ ld64 764
Build machine cpu family: x86_64
Build machine cpu: x86_64
Host machine cpu family: x86_64
Host machine cpu: x86_64
Target machine cpu family: x86_64
Target machine cpu: x86_64
Message: optimization level is 3
Message: standard: c++20

Executing subproject sdl2 

Project name: sdl2
Project version: 2.0.20
C compiler for the host machine: cc (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C linker for the host machine: cc ld64 764
C compiler for the build machine: cc (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C linker for the build machine: cc ld64 764
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Wdeclaration-after-statement: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -Wshadow: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 
Compiler for C supports arguments -fno-strict-aliasing: YES (cached)
Using cached compile:
Cached command line:   

Code:
 extern int i;
int i;

Cached compiler stdout:
 
Cached compiler stderr:
 clang: error: unknown argument: '-mpreferred-stack-boundary=2'

Compiler for C supports arguments -mpreferred-stack-boundary=2: NO (cached)
Dependency gl found: YES unknown (cached)
Pkg-config binary for 1 is not cached.
Pkg-config binary missing from cross or native file, or env var undefined.
Trying a default Pkg-config fallback at pkg-config
Found pkg-config: /opt/brew/bin/pkg-config (0.29.2)
Determining dependency 'glesv2' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion glesv2` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework glesv2 in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is not cached
CMake binary missing from cross or native file, or env var undefined.
Trying a default CMake fallback at cmake
Found CMake: /opt/brew/bin/cmake (3.23.2)
Extracting basic cmake information
Try CMake generator: auto
Calling CMake (['/opt/brew/bin/cmake']) in /Users/kyle/git/cppong/ECS/builddir/meson-private/cmake_glesv2 with:
  - "--trace-expand"
  - "--trace-format=json-v1"
  - "--no-warn-unused-cli"
  - "--trace-redirect=cmake_trace.txt"
  - "-DCMAKE_TOOLCHAIN_FILE=/Users/kyle/git/cppong/ECS/builddir/meson-private/cmake_glesv2/CMakeMesonToolchainFile.cmake"
  - "."
  -- Module search paths:    ['/', '/Applications', '/Applications/Xcode.app/Contents/Applications', '/Applications/Xcode.app/Contents/Developer/Applications', '/Applications/Xcode.app/Contents/Developer/Library/Frameworks', '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/Library/Frameworks', '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/System/Library/Frameworks', '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.3.sdk/usr', '/Library/Frameworks', '/System/Library/Frameworks', '/Users/kyle/Applications', '/opt', '/opt/brew/Cellar/cmake/3.23.2', '/usr', '/usr/X11R6', '/usr/local']
  -- CMake root:             /opt/brew/Cellar/cmake/3.23.2/share/cmake
  -- CMake architectures:    []
  -- CMake lib search paths: ['lib', 'lib32', 'lib64', 'libx32', 'share']
Preliminary CMake check failed. Aborting.
Run-time dependency glesv2 found: NO (tried pkgconfig, framework and cmake)
Message: Using embedded GLESv2 headers
Pkg-config binary for 1 is cached.
Determining dependency 'egl' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion egl` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework egl in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency egl found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'egl' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Finding framework path by running:  c++ -v -E - 

Looking for framework egl in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency egl found: NO (tried pkgconfig, framework and cmake)
Message: Using embedded EGL headers
Pkg-config binary for 1 is cached.
Determining dependency 'glx' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion glx` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework glx in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency glx found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'alsa' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion alsa` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework alsa in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.

Determining dependency 'alsa' with CMake executable '/opt/brew/bin/cmake'
Try CMake generator: auto
Calling CMake (['/opt/brew/bin/cmake']) in /Users/kyle/git/cppong/ECS/builddir/meson-private/cmake_alsa with:
  - "-DNAME=alsa"
  - "-DARCHS="
  - "-DVERSION="
  - "-DCOMPS="
  - "--trace-expand"
  - "--trace-format=json-v1"
  - "--no-warn-unused-cli"
  - "--trace-redirect=cmake_trace.txt"
  - "-DCMAKE_TOOLCHAIN_FILE=/Users/kyle/git/cppong/ECS/builddir/meson-private/cmake_alsa/CMakeMesonToolchainFile.cmake"
  - "."
Run-time dependency alsa found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'libpulse-simple' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion libpulse-simple` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework libpulse-simple in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency libpulse-simple found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'jack' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion jack` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework jack in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency jack found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'libpipewire-0.3' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion libpipewire-0.3` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework libpipewire-0.3 in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency libpipewire-0.3 found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'vulkan' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion vulkan` -> 1

Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpwe24nfgu
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpwe24nfgu/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpwe24nfgu/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -lvulkan -Wl,-undefined,dynamic_lookup 

Code:
 int main(void) { return 0; }

Compiler stdout:
 
Compiler stderr:
 ld: library not found for -lvulkan
clang: error: linker command failed with exit code 1 (use -v to see invocation)

Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpes1r11sw
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpes1r11sw/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpes1r11sw/output.exe -O0 -fpermissive -Werror=implicit-function-declaration 

Code:
 #include<stdio.h>
        
        int main(void) {
            printf("%ld\n", (long)(sizeof(void *)));
            return 0;
        }
Compiler stdout:
 
Compiler stderr:
 
Program stdout:

8

Program stderr:


Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpwd3p3syo
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpwd3p3syo/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpwd3p3syo/output.obj -c -O0 -fpermissive -Werror=implicit-function-declaration -Werror=unknown-warning-option -Werror=unused-command-line-argument -Werror=ignored-optimization-argument --print-search-dirs 

Code:
 
Compiler stdout:
 programs: =/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
libraries: =/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6

Compiler stderr:
 
Run-time dependency vulkan found: NO (tried pkgconfig and system)
Dependency x11 found: YES 1.8 (cached)
Dependency xext found: YES 1.3.4 (cached)
Pkg-config binary for 1 is cached.
Determining dependency 'xi' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion xi` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework xi in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency xi found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'xinerama' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion xinerama` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework xinerama in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency xinerama found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'xkbcommon' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion xkbcommon` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework xkbcommon in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency xkbcommon found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'xrandr' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion xrandr` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework xrandr in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency xrandr found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'xfixes' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion xfixes` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework xfixes in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency xfixes found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'xcursor' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion xcursor` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework xcursor in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency xcursor found: NO (tried pkgconfig, framework and cmake)
Dependency threads found: YES unknown (cached)
Pkg-config binary for 1 is cached.
Determining dependency 'libusb-1.0' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion libusb-1.0` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework libusb-1.0 in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency libusb-1.0 found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'dbus-1' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion dbus-1` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework dbus-1 in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency dbus-1 found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'wayland-client' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion wayland-client` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework wayland-client in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency wayland-client found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'wayland-cursor' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion wayland-cursor` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework wayland-cursor in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency wayland-cursor found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'wayland-egl' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion wayland-egl` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework wayland-egl in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency wayland-egl found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'wayland-protocols' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion wayland-protocols` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework wayland-protocols in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency wayland-protocols found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'wayland-scanner' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion wayland-scanner` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework wayland-scanner in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency wayland-scanner found: NO (tried pkgconfig, framework and cmake)
Pkg-config binary for 1 is cached.
Determining dependency 'libdecor-0' with pkg-config executable '/opt/brew/bin/pkg-config'
env[PKG_CONFIG_PATH]: /Users/kyle/git/vcpkg/installed/x64-osx/lib/pkgconfig
Called `/opt/brew/bin/pkg-config --modversion libdecor-0` -> 1

Finding framework path by running:  c++ -v -E - 

Looking for framework libdecor-0 in /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks
CMake binary for 1 is cached.
Preliminary CMake check failed. Aborting.
Run-time dependency libdecor-0 found: NO (tried pkgconfig, framework and cmake)
Program wayland-scanner found: NO
Program ./find-dylib-name.py found: YES (/opt/brew/Cellar/meson/0.62.2/libexec/bin/python3.10 /Users/kyle/git/cppong/ECS/subprojects/SDL2-2.0.20/./find-dylib-name.py)
Running command: /opt/brew/Cellar/meson/0.62.2/libexec/bin/python3.10 /Users/kyle/git/cppong/ECS/subprojects/SDL2-2.0.20/./find-dylib-name.py X11 cc
--- stdout ---

--- stderr ---
Looking for X11
cc: ['cc']
Search path:
	/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6


Running command: /opt/brew/Cellar/meson/0.62.2/libexec/bin/python3.10 /Users/kyle/git/cppong/ECS/subprojects/SDL2-2.0.20/./find-dylib-name.py Xext cc
--- stdout ---

--- stderr ---
Looking for Xext
cc: ['cc']
Search path:
	/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6


Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpyhj3u6o8
Command line:  cc /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpyhj3u6o8/testfile.c -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpyhj3u6o8/output.exe -O0 -Werror=implicit-function-declaration -lm -Wl,-undefined,dynamic_lookup 

Code:
 int main(void) { return 0; }

Compiler stdout:
 
Compiler stderr:
 
Library m found: YES
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpgz9a9ypb
Command line:  cc /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpgz9a9ypb/testfile.c -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpgz9a9ypb/output.exe -O0 -Werror=implicit-function-declaration -ldl -Wl,-undefined,dynamic_lookup 

Code:
 int main(void) { return 0; }

Compiler stdout:
 
Compiler stderr:
 
Library dl found: YES
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpfbxjv9b8
Command line:  cc /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpfbxjv9b8/testfile.c -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpfbxjv9b8/output.exe -O0 -Werror=implicit-function-declaration -liconv -Wl,-undefined,dynamic_lookup 

Code:
 int main(void) { return 0; }

Compiler stdout:
 
Compiler stderr:
 
Library iconv found: YES
Message: Subsystem "atomic" is ENABLED
Message: Subsystem "audio" is ENABLED
Message: Subsystem "cpuinfo" is ENABLED
Message: Subsystem "events" is ENABLED
Message: Subsystem "file" is ENABLED
Message: Subsystem "filesystem" is ENABLED
Message: Subsystem "haptic" is ENABLED
Message: Subsystem "hidapi" is ENABLED
Message: Subsystem "joystick" is ENABLED
Message: Subsystem "loadso" is ENABLED
Message: Subsystem "locale" is ENABLED
Message: Subsystem "power" is ENABLED
Message: Subsystem "render" is ENABLED
Message: Subsystem "sensor" is ENABLED
Message: Subsystem "threads" is ENABLED
Message: Subsystem "timers" is ENABLED
Message: Subsystem "video" is ENABLED
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp_k1u8fni
Command line:  cc /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp_k1u8fni/testfile.c -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp_k1u8fni/output.exe -O0 -Werror=implicit-function-declaration 

Code:
 #include<stdio.h>
        
        int main(void) {
            printf("%ld\n", (long)(sizeof(void*)));
            return 0;
        }
Compiler stdout:
 
Compiler stderr:
 
Program stdout:

8

Program stderr:


Checking for size of "void*" : 8
Using cached compile:
Cached command line:   

Code:
 
        #include <alloca.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "alloca.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <altivec.h>
Cached compiler stdout:
 
Cached compiler stderr:
 In file included from /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp92q4ekzl/testfile.c:2:
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:13:2: error: "AltiVec support not enabled"
#error "AltiVec support not enabled"
 ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:46:19: error: unknown type name 'vector'
static __inline__ vector signed char __ATTRS_o_ai vec_perm(
                  ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:47:5: error: unknown type name 'vector'
    vector signed char __a, vector signed char __b, vector unsigned char __c);
    ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:47:29: error: unknown type name 'vector'
    vector signed char __a, vector signed char __b, vector unsigned char __c);
                            ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:47:53: error: unknown type name 'vector'
    vector signed char __a, vector signed char __b, vector unsigned char __c);
                                                    ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:49:19: error: unknown type name 'vector'
static __inline__ vector unsigned char __ATTRS_o_ai
                  ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:50:10: error: unknown type name 'vector'
vec_perm(vector unsigned char __a, vector unsigned char __b,
         ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:50:36: error: unknown type name 'vector'
vec_perm(vector unsigned char __a, vector unsigned char __b,
                                   ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:51:10: error: unknown type name 'vector'
         vector unsigned char __c);
         ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:53:19: error: unknown type name 'vector'
static __inline__ vector bool char __ATTRS_o_ai
                  ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:53:8: error: 'inline' can only appear on functions
static __inline__ vector bool char __ATTRS_o_ai
       ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:53:30: error: expected ';' after top level declarator
static __inline__ vector bool char __ATTRS_o_ai
                             ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:54:10: error: unknown type name 'vector'
vec_perm(vector bool char __a, vector bool char __b, vector unsigned char __c);
         ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:54:22: error: expected ')'
vec_perm(vector bool char __a, vector bool char __b, vector unsigned char __c);
                     ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:54:9: note: to match this '('
vec_perm(vector bool char __a, vector bool char __b, vector unsigned char __c);
        ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:56:19: error: unknown type name 'vector'
static __inline__ vector short __ATTRS_o_ai vec_perm(vector signed short __a,
                  ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:56:54: error: unknown type name 'vector'
static __inline__ vector short __ATTRS_o_ai vec_perm(vector signed short __a,
                                                     ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:57:54: error: unknown type name 'vector'
                                                     vector signed short __b,
                                                     ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:58:54: error: unknown type name 'vector'
                                                     vector unsigned char __c);
                                                     ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6/include/altivec.h:60:19: error: unknown type name 'vector'
static __inline__ vector unsigned short __ATTRS_o_ai
                  ^
fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated.

Check usable header "altivec.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <audioclient.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmporseg1r9/testfile.c:2:18: fatal error: 'audioclient.h' file not found
        #include <audioclient.h>
                 ^~~~~~~~~~~~~~~
1 error generated.

Check usable header "audioclient.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <ctype.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "ctype.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <ddraw.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpmolzwde8/testfile.c:2:18: fatal error: 'ddraw.h' file not found
        #include <ddraw.h>
                 ^~~~~~~~~
1 error generated.

Check usable header "ddraw.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <dinput.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpyjp5sdva/testfile.c:2:18: fatal error: 'dinput.h' file not found
        #include <dinput.h>
                 ^~~~~~~~~~
1 error generated.

Check usable header "dinput.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <dsound.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7yqfjy29/testfile.c:2:18: fatal error: 'dsound.h' file not found
        #include <dsound.h>
                 ^~~~~~~~~~
1 error generated.

Check usable header "dsound.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <dxgi.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7or8ro5e/testfile.c:2:18: fatal error: 'dxgi.h' file not found
        #include <dxgi.h>
                 ^~~~~~~~
1 error generated.

Check usable header "dxgi.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <endpointvolume.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp4jituqzk/testfile.c:2:18: fatal error: 'endpointvolume.h' file not found
        #include <endpointvolume.h>
                 ^~~~~~~~~~~~~~~~~~
1 error generated.

Check usable header "endpointvolume.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <fcitx/frontend.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp0s8ncp6_/testfile.c:2:18: fatal error: 'fcitx/frontend.h' file not found
        #include <fcitx/frontend.h>
                 ^~~~~~~~~~~~~~~~~~
1 error generated.

Check usable header "fcitx/frontend.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <float.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "float.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <iconv.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "iconv.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <immintrin.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "immintrin.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <inttypes.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "inttypes.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <libsamplerate.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7fbt4zsa/testfile.c:2:18: fatal error: 'libsamplerate.h' file not found
        #include <libsamplerate.h>
                 ^~~~~~~~~~~~~~~~~
1 error generated.

Check usable header "libsamplerate.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <libudev.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp_che7xxm/testfile.c:2:18: fatal error: 'libudev.h' file not found
        #include <libudev.h>
                 ^~~~~~~~~~~
1 error generated.

Check usable header "libudev.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <libunwind.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "libunwind.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <limits.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "limits.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <malloc.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpv0s1p25a/testfile.c:2:18: fatal error: 'malloc.h' file not found
        #include <malloc.h>
                 ^~~~~~~~~~
1 error generated.

Check usable header "malloc.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <math.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "math.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <memory.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "memory.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <mmdeviceapi.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp3t4pibmq/testfile.c:2:18: fatal error: 'mmdeviceapi.h' file not found
        #include <mmdeviceapi.h>
                 ^~~~~~~~~~~~~~~
1 error generated.

Check usable header "mmdeviceapi.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <pthread.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "pthread.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <pthread_np.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpe3aal1eg/testfile.c:2:18: fatal error: 'pthread_np.h' file not found
        #include <pthread_np.h>
                 ^~~~~~~~~~~~~~
1 error generated.

Check usable header "pthread_np.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <semaphore.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "semaphore.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <sensorsapi.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpgkrn96rl/testfile.c:2:18: fatal error: 'sensorsapi.h' file not found
        #include <sensorsapi.h>
                 ^~~~~~~~~~~~~~
1 error generated.

Check usable header "sensorsapi.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <signal.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "signal.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <stdarg.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "stdarg.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <stdint.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "stdint.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <stdio.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "stdio.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <stdlib.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "stdlib.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <string.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "string.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <strings.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "strings.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <sys/inotify.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpjgff5f2z/testfile.c:2:18: fatal error: 'sys/inotify.h' file not found
        #include <sys/inotify.h>
                 ^~~~~~~~~~~~~~~
1 error generated.

Check usable header "sys/inotify.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <sys/types.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "sys/types.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <wchar.h>
Cached compiler stdout:
 
Cached compiler stderr:
 
Check usable header "wchar.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <windows.gaming.input.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp9zhgt0a0/testfile.c:2:18: fatal error: 'windows.gaming.input.h' file not found
        #include <windows.gaming.input.h>
                 ^~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.

Check usable header "windows.gaming.input.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
        #include <xinput.h>
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpae59ucem/testfile.c:2:18: fatal error: 'xinput.h' file not found
        #include <xinput.h>
                 ^~~~~~~~~~
1 error generated.

Check usable header "xinput.h" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__

        #include <fcntl.h>
        int main(void) {
            /* If it's not defined as a macro, try to use as a symbol */
            #ifndef O_CLOEXEC
                O_CLOEXEC;
            #endif
            return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Header <fcntl.h> has symbol "O_CLOEXEC" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__

        #include <math.h>
        int main(void) {
            /* If it's not defined as a macro, try to use as a symbol */
            #ifndef M_PI
                M_PI;
            #endif
            return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Header <math.h> has symbol "M_PI" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__

        #include <pthread.h>
        int main(void) {
            /* If it's not defined as a macro, try to use as a symbol */
            #ifndef PTHREAD_MUTEX_RECURSIVE
                PTHREAD_MUTEX_RECURSIVE;
            #endif
            return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Header <pthread.h> has symbol "PTHREAD_MUTEX_RECURSIVE" : YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__

        #include <pthread.h>
        int main(void) {
            /* If it's not defined as a macro, try to use as a symbol */
            #ifndef PTHREAD_MUTEX_RECURSIVE_NP
                PTHREAD_MUTEX_RECURSIVE_NP;
            #endif
            return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp42uql7w_/testfile.c:14:17: error: use of undeclared identifier 'PTHREAD_MUTEX_RECURSIVE_NP'
                PTHREAD_MUTEX_RECURSIVE_NP;
                ^
1 error generated.

Header <pthread.h> has symbol "PTHREAD_MUTEX_RECURSIVE_NP" : NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub__Exit || defined __stub____Exit
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_Exit;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "_Exit" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub__i64toa || defined __stub____i64toa
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_i64toa;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpo3hn_j68/testfile.c:17:32: error: use of undeclared identifier '_i64toa'
            void *a = (void*) &_i64toa;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_i64toa) && !0
            #error "No definition for __builtin__i64toa found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__i64toa)
                #error "__builtin__i64toa not found"
            #endif
        #elif ! defined(_i64toa)
            __builtin__i64toa;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp_84i80j5/testfile.c:20:14: error: "No definition for __builtin__i64toa found in the prefix"
            #error "No definition for __builtin__i64toa found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmp_84i80j5/testfile.c:25:18: error: "__builtin__i64toa not found"
                #error "__builtin__i64toa not found"
                 ^
2 errors generated.

Checking for function "_i64toa" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stlib.h>
#include <limits.h>

        #if defined __stub__ltoa || defined __stub____ltoa
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_ltoa;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp8jwb6992/testfile.c:9:10: fatal error: 'stlib.h' file not found
#include <stlib.h>
         ^~~~~~~~~
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stlib.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_ltoa) && !0
            #error "No definition for __builtin__ltoa found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__ltoa)
                #error "__builtin__ltoa not found"
            #endif
        #elif ! defined(_ltoa)
            __builtin__ltoa;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpik0c2f4c/testfile.c:9:10: fatal error: 'stlib.h' file not found
#include <stlib.h>
         ^~~~~~~~~
1 error generated.

Checking for function "_ltoa" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub__stricmp || defined __stub____stricmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_stricmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp39d5iix1/testfile.c:17:32: error: use of undeclared identifier '_stricmp'
            void *a = (void*) &_stricmp;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_stricmp) && !0
            #error "No definition for __builtin__stricmp found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__stricmp)
                #error "__builtin__stricmp not found"
            #endif
        #elif ! defined(_stricmp)
            __builtin__stricmp;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp4h_gr3vs/testfile.c:20:14: error: "No definition for __builtin__stricmp found in the prefix"
            #error "No definition for __builtin__stricmp found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmp4h_gr3vs/testfile.c:25:18: error: "__builtin__stricmp not found"
                #error "__builtin__stricmp not found"
                 ^
2 errors generated.

Checking for function "_stricmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub__strlwr || defined __stub____strlwr
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_strlwr;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpu9kpuegf/testfile.c:17:32: error: use of undeclared identifier '_strlwr'
            void *a = (void*) &_strlwr;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_strlwr) && !0
            #error "No definition for __builtin__strlwr found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__strlwr)
                #error "__builtin__strlwr not found"
            #endif
        #elif ! defined(_strlwr)
            __builtin__strlwr;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpqb9q4hg5/testfile.c:20:14: error: "No definition for __builtin__strlwr found in the prefix"
            #error "No definition for __builtin__strlwr found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpqb9q4hg5/testfile.c:25:18: error: "__builtin__strlwr not found"
                #error "__builtin__strlwr not found"
                 ^
2 errors generated.

Checking for function "_strlwr" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub__strnicmp || defined __stub____strnicmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_strnicmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpqstm_yed/testfile.c:17:32: error: use of undeclared identifier '_strnicmp'; did you mean 'strncmp'?
            void *a = (void*) &_strnicmp;
                               ^~~~~~~~~
                               strncmp
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/string.h:84:6: note: 'strncmp' declared here
int      strncmp(const char *__s1, const char *__s2, size_t __n);
         ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_strnicmp) && !0
            #error "No definition for __builtin__strnicmp found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__strnicmp)
                #error "__builtin__strnicmp not found"
            #endif
        #elif ! defined(_strnicmp)
            __builtin__strnicmp;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp_8yxyfk9/testfile.c:20:14: error: "No definition for __builtin__strnicmp found in the prefix"
            #error "No definition for __builtin__strnicmp found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmp_8yxyfk9/testfile.c:25:18: error: "__builtin__strnicmp not found"
                #error "__builtin__strnicmp not found"
                 ^
2 errors generated.

Checking for function "_strnicmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub__strrev || defined __stub____strrev
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_strrev;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp0g6tk1c2/testfile.c:17:32: error: use of undeclared identifier '_strrev'; did you mean 'strlen'?
            void *a = (void*) &_strrev;
                               ^~~~~~~
                               strlen
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/string.h:82:9: note: 'strlen' declared here
size_t   strlen(const char *__s);
         ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_strrev) && !0
            #error "No definition for __builtin__strrev found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__strrev)
                #error "__builtin__strrev not found"
            #endif
        #elif ! defined(_strrev)
            __builtin__strrev;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpm5wxts5i/testfile.c:20:14: error: "No definition for __builtin__strrev found in the prefix"
            #error "No definition for __builtin__strrev found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpm5wxts5i/testfile.c:25:18: error: "__builtin__strrev not found"
                #error "__builtin__strrev not found"
                 ^
2 errors generated.

Checking for function "_strrev" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub__strupr || defined __stub____strupr
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_strupr;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp9pdtum4q/testfile.c:17:32: error: use of undeclared identifier '_strupr'
            void *a = (void*) &_strupr;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_strupr) && !0
            #error "No definition for __builtin__strupr found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__strupr)
                #error "__builtin__strupr not found"
            #endif
        #elif ! defined(_strupr)
            __builtin__strupr;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpv3p7zvbr/testfile.c:20:14: error: "No definition for __builtin__strupr found in the prefix"
            #error "No definition for __builtin__strupr found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpv3p7zvbr/testfile.c:25:18: error: "__builtin__strupr not found"
                #error "__builtin__strupr not found"
                 ^
2 errors generated.

Checking for function "_strupr" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub__uit64toa || defined __stub____uit64toa
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_uit64toa;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpgbij7u7h/testfile.c:17:32: error: use of undeclared identifier '_uit64toa'
            void *a = (void*) &_uit64toa;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_uit64toa) && !0
            #error "No definition for __builtin__uit64toa found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__uit64toa)
                #error "__builtin__uit64toa not found"
            #endif
        #elif ! defined(_uit64toa)
            __builtin__uit64toa;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpvpfxi3ko/testfile.c:20:14: error: "No definition for __builtin__uit64toa found in the prefix"
            #error "No definition for __builtin__uit64toa found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpvpfxi3ko/testfile.c:25:18: error: "__builtin__uit64toa not found"
                #error "__builtin__uit64toa not found"
                 ^
2 errors generated.

Checking for function "_uit64toa" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub__uitoa || defined __stub____uitoa
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_uitoa;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpyz75mofz/testfile.c:17:32: error: use of undeclared identifier '_uitoa'
            void *a = (void*) &_uitoa;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_uitoa) && !0
            #error "No definition for __builtin__uitoa found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__uitoa)
                #error "__builtin__uitoa not found"
            #endif
        #elif ! defined(_uitoa)
            __builtin__uitoa;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmphpgh6rbq/testfile.c:20:14: error: "No definition for __builtin__uitoa found in the prefix"
            #error "No definition for __builtin__uitoa found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmphpgh6rbq/testfile.c:25:18: error: "__builtin__uitoa not found"
                #error "__builtin__uitoa not found"
                 ^
2 errors generated.

Checking for function "_uitoa" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub__ultoa || defined __stub____ultoa
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_ultoa;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpy4f5wmv2/testfile.c:17:32: error: use of undeclared identifier '_ultoa'
            void *a = (void*) &_ultoa;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_ultoa) && !0
            #error "No definition for __builtin__ultoa found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__ultoa)
                #error "__builtin__ultoa not found"
            #endif
        #elif ! defined(_ultoa)
            __builtin__ultoa;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpe5k8cv3p/testfile.c:20:14: error: "No definition for __builtin__ultoa found in the prefix"
            #error "No definition for __builtin__ultoa found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpe5k8cv3p/testfile.c:25:18: error: "__builtin__ultoa not found"
                #error "__builtin__ultoa not found"
                 ^
2 errors generated.

Checking for function "_ultoa" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
#include <limits.h>

        #if defined __stub__wcsdup || defined __stub____wcsdup
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_wcsdup;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7u2el0fd/testfile.c:17:32: error: use of undeclared identifier '_wcsdup'; did you mean 'wcsdup'?
            void *a = (void*) &_wcsdup;
                               ^~~~~~~
                               wcsdup
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/wchar.h:199:10: note: 'wcsdup' declared here
wchar_t *wcsdup(const wchar_t *) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_3);
         ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_wcsdup) && !0
            #error "No definition for __builtin__wcsdup found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__wcsdup)
                #error "__builtin__wcsdup not found"
            #endif
        #elif ! defined(_wcsdup)
            __builtin__wcsdup;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpjku94kjb/testfile.c:20:14: error: "No definition for __builtin__wcsdup found in the prefix"
            #error "No definition for __builtin__wcsdup found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpjku94kjb/testfile.c:25:18: error: "__builtin__wcsdup not found"
                #error "__builtin__wcsdup not found"
                 ^
2 errors generated.

Checking for function "_wcsdup" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
#include <limits.h>

        #if defined __stub__wcsicmp || defined __stub____wcsicmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_wcsicmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp3zb7_1bq/testfile.c:17:32: error: use of undeclared identifier '_wcsicmp'
            void *a = (void*) &_wcsicmp;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_wcsicmp) && !0
            #error "No definition for __builtin__wcsicmp found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__wcsicmp)
                #error "__builtin__wcsicmp not found"
            #endif
        #elif ! defined(_wcsicmp)
            __builtin__wcsicmp;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpfzwi1ipp/testfile.c:20:14: error: "No definition for __builtin__wcsicmp found in the prefix"
            #error "No definition for __builtin__wcsicmp found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpfzwi1ipp/testfile.c:25:18: error: "__builtin__wcsicmp not found"
                #error "__builtin__wcsicmp not found"
                 ^
2 errors generated.

Checking for function "_wcsicmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
#include <limits.h>

        #if defined __stub__wcsnicmp || defined __stub____wcsnicmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &_wcsnicmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpswwtuj65/testfile.c:17:32: error: use of undeclared identifier '_wcsnicmp'; did you mean 'wcsncmp'?
            void *a = (void*) &_wcsnicmp;
                               ^~~~~~~~~
                               wcsncmp
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/wchar.h:134:5: note: 'wcsncmp' declared here
int     wcsncmp(const wchar_t *, const wchar_t *, size_t);
        ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(_wcsnicmp) && !0
            #error "No definition for __builtin__wcsnicmp found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin__wcsnicmp)
                #error "__builtin__wcsnicmp not found"
            #endif
        #elif ! defined(_wcsnicmp)
            __builtin__wcsnicmp;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp1dwlk142/testfile.c:20:14: error: "No definition for __builtin__wcsnicmp found in the prefix"
            #error "No definition for __builtin__wcsnicmp found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmp1dwlk142/testfile.c:25:18: error: "__builtin__wcsnicmp not found"
                #error "__builtin__wcsnicmp not found"
                 ^
2 errors generated.

Checking for function "_wcsnicmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_abs || defined __stub___abs
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &abs;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "abs" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_acos || defined __stub___acos
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &acos;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "acos" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_acosf || defined __stub___acosf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &acosf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "acosf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_alloca || defined __stub___alloca
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &alloca;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpkmdfnzox/testfile.c:17:32: error: implicitly declaring library function 'alloca' with type 'void *(unsigned long)' [-Werror,-Wimplicit-function-declaration]
            void *a = (void*) &alloca;
                               ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpkmdfnzox/testfile.c:17:32: note: include the header <stdlib.h> or explicitly provide a declaration for 'alloca'
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(alloca) && !0
            #error "No definition for __builtin_alloca found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_alloca)
                #error "__builtin_alloca not found"
            #endif
        #elif ! defined(alloca)
            __builtin_alloca;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpk042lz4y/testfile.c:20:14: error: "No definition for __builtin_alloca found in the prefix"
            #error "No definition for __builtin_alloca found in the prefix"
             ^
1 error generated.

Checking for function "alloca" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_asin || defined __stub___asin
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &asin;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "asin" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_asinf || defined __stub___asinf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &asinf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "asinf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_atan || defined __stub___atan
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &atan;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "atan" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_atan2 || defined __stub___atan2
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &atan2;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "atan2" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_atan2f || defined __stub___atan2f
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &atan2f;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "atan2f" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_atanf || defined __stub___atanf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &atanf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "atanf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_atof || defined __stub___atof
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &atof;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "atof" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_atoi || defined __stub___atoi
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &atoi;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "atoi" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <strings.h>
#include <limits.h>

        #if defined __stub_bcopy || defined __stub___bcopy
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &bcopy;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp2j1g3v7r/testfile.c:17:32: error: use of undeclared identifier 'bcopy'
            void *a = (void*) &bcopy;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <strings.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(bcopy) && !0
            #error "No definition for __builtin_bcopy found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_bcopy)
                #error "__builtin_bcopy not found"
            #endif
        #elif ! defined(bcopy)
            __builtin_bcopy;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpvvswqtf3/testfile.c:20:14: error: "No definition for __builtin_bcopy found in the prefix"
            #error "No definition for __builtin_bcopy found in the prefix"
             ^
1 error generated.

Checking for function "bcopy" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_calloc || defined __stub___calloc
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &calloc;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "calloc" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_ceil || defined __stub___ceil
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &ceil;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "ceil" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_ceilf || defined __stub___ceilf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &ceilf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "ceilf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <time.h>
#include <limits.h>

        #if defined __stub_clock_gettime || defined __stub___clock_gettime
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &clock_gettime;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "clock_gettime" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_copysign || defined __stub___copysign
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &copysign;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "copysign" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_copysignf || defined __stub___copysignf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &copysignf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "copysignf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_cos || defined __stub___cos
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &cos;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "cos" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_cosf || defined __stub___cosf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &cosf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "cosf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <dlfcn.h>
#include <limits.h>

        #if defined __stub_dlopen || defined __stub___dlopen
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &dlopen;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "dlopen" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/auxv.h>
#include <limits.h>

        #if defined __stub_elf_aux_info || defined __stub___elf_aux_info
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &elf_aux_info;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5rpgnluk/testfile.c:9:10: fatal error: 'sys/auxv.h' file not found
#include <sys/auxv.h>
         ^~~~~~~~~~~~
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/auxv.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(elf_aux_info) && !0
            #error "No definition for __builtin_elf_aux_info found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_elf_aux_info)
                #error "__builtin_elf_aux_info not found"
            #endif
        #elif ! defined(elf_aux_info)
            __builtin_elf_aux_info;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpv4bx7dfc/testfile.c:9:10: fatal error: 'sys/auxv.h' file not found
#include <sys/auxv.h>
         ^~~~~~~~~~~~
1 error generated.

Checking for function "elf_aux_info" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_exp || defined __stub___exp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &exp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "exp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_expf || defined __stub___expf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &expf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "expf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_fabs || defined __stub___fabs
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &fabs;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "fabs" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_fabsf || defined __stub___fabsf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &fabsf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "fabsf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_floor || defined __stub___floor
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &floor;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "floor" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_floorf || defined __stub___floorf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &floorf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "floorf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_fmod || defined __stub___fmod
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &fmod;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "fmod" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_fmodf || defined __stub___fmodf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &fmodf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "fmodf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdio.h>
#include <limits.h>

        #if defined __stub_fopen64 || defined __stub___fopen64
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &fopen64;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5x2ivl1o/testfile.c:17:32: error: use of undeclared identifier 'fopen64'; did you mean 'fopen'?
            void *a = (void*) &fopen64;
                               ^~~~~~~
                               fopen
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdio.h:153:7: note: 'fopen' declared here
FILE    *fopen(const char * __restrict __filename, const char * __restrict __mode) __DARWIN_ALIAS_STARTING(__MAC_10_6, __IPHONE_2_0, __DARWIN_ALIAS(fopen));
         ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdio.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(fopen64) && !0
            #error "No definition for __builtin_fopen64 found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_fopen64)
                #error "__builtin_fopen64 not found"
            #endif
        #elif ! defined(fopen64)
            __builtin_fopen64;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpneobv30k/testfile.c:20:14: error: "No definition for __builtin_fopen64 found in the prefix"
            #error "No definition for __builtin_fopen64 found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpneobv30k/testfile.c:25:18: error: "__builtin_fopen64 not found"
                #error "__builtin_fopen64 not found"
                 ^
2 errors generated.

Checking for function "fopen64" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_free || defined __stub___free
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &free;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "free" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdio.h>
#include <limits.h>

        #if defined __stub_fseeko || defined __stub___fseeko
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &fseeko;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "fseeko" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdio.h>
#include <limits.h>

        #if defined __stub_fseeko64 || defined __stub___fseeko64
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &fseeko64;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpe2e_swbw/testfile.c:17:32: error: use of undeclared identifier 'fseeko64'; did you mean 'fseeko'?
            void *a = (void*) &fseeko64;
                               ^~~~~~~~
                               fseeko
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdio.h:320:6: note: 'fseeko' declared here
int      fseeko(FILE * __stream, off_t __offset, int __whence);
         ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdio.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(fseeko64) && !0
            #error "No definition for __builtin_fseeko64 found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_fseeko64)
                #error "__builtin_fseeko64 not found"
            #endif
        #elif ! defined(fseeko64)
            __builtin_fseeko64;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpe4zkdyt3/testfile.c:20:14: error: "No definition for __builtin_fseeko64 found in the prefix"
            #error "No definition for __builtin_fseeko64 found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpe4zkdyt3/testfile.c:25:18: error: "__builtin_fseeko64 not found"
                #error "__builtin_fseeko64 not found"
                 ^
2 errors generated.

Checking for function "fseeko64" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/auxv.h>
#include <limits.h>

        #if defined __stub_getauxval || defined __stub___getauxval
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &getauxval;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpocuep6ps/testfile.c:9:10: fatal error: 'sys/auxv.h' file not found
#include <sys/auxv.h>
         ^~~~~~~~~~~~
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/auxv.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(getauxval) && !0
            #error "No definition for __builtin_getauxval found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_getauxval)
                #error "__builtin_getauxval not found"
            #endif
        #elif ! defined(getauxval)
            __builtin_getauxval;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpycs9limc/testfile.c:9:10: fatal error: 'sys/auxv.h' file not found
#include <sys/auxv.h>
         ^~~~~~~~~~~~
1 error generated.

Checking for function "getauxval" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_getenv || defined __stub___getenv
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &getenv;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "getenv" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <unistd.h>
#include <limits.h>

        #if defined __stub_getpagesize || defined __stub___getpagesize
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &getpagesize;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpbxut8zyp/testfile.c:17:32: error: use of undeclared identifier 'getpagesize'
            void *a = (void*) &getpagesize;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <unistd.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(getpagesize) && !0
            #error "No definition for __builtin_getpagesize found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_getpagesize)
                #error "__builtin_getpagesize not found"
            #endif
        #elif ! defined(getpagesize)
            __builtin_getpagesize;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp_oz8qrhi/testfile.c:20:14: error: "No definition for __builtin_getpagesize found in the prefix"
            #error "No definition for __builtin_getpagesize found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmp_oz8qrhi/testfile.c:25:18: error: "__builtin_getpagesize not found"
                #error "__builtin_getpagesize not found"
                 ^
2 errors generated.

Checking for function "getpagesize" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <iconv.h>
#include <limits.h>

        #if defined __stub_iconv || defined __stub___iconv
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &iconv;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "iconv" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <strings.h>
#include <limits.h>

        #if defined __stub_index || defined __stub___index
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &index;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpmvmqsl9g/testfile.c:17:32: error: implicitly declaring library function 'index' with type 'char *(const char *, int)' [-Werror,-Wimplicit-function-declaration]
            void *a = (void*) &index;
                               ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpmvmqsl9g/testfile.c:17:32: note: include the header <strings.h> or explicitly provide a declaration for 'index'
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <strings.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(index) && !0
            #error "No definition for __builtin_index found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_index)
                #error "__builtin_index not found"
            #endif
        #elif ! defined(index)
            __builtin_index;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp3mugyad6/testfile.c:20:14: error: "No definition for __builtin_index found in the prefix"
            #error "No definition for __builtin_index found in the prefix"
             ^
1 error generated.

Checking for function "index" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/inotify.h>
#include <limits.h>

        #if defined __stub_inotify_init || defined __stub___inotify_init
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &inotify_init;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp79wf4s8f/testfile.c:9:10: fatal error: 'sys/inotify.h' file not found
#include <sys/inotify.h>
         ^~~~~~~~~~~~~~~
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/inotify.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(inotify_init) && !0
            #error "No definition for __builtin_inotify_init found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_inotify_init)
                #error "__builtin_inotify_init not found"
            #endif
        #elif ! defined(inotify_init)
            __builtin_inotify_init;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpsf9376l7/testfile.c:9:10: fatal error: 'sys/inotify.h' file not found
#include <sys/inotify.h>
         ^~~~~~~~~~~~~~~
1 error generated.

Checking for function "inotify_init" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/inotify.h>
#include <limits.h>

        #if defined __stub_inotify_init1 || defined __stub___inotify_init1
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &inotify_init1;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpti1u_g0s/testfile.c:9:10: fatal error: 'sys/inotify.h' file not found
#include <sys/inotify.h>
         ^~~~~~~~~~~~~~~
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/inotify.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(inotify_init1) && !0
            #error "No definition for __builtin_inotify_init1 found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_inotify_init1)
                #error "__builtin_inotify_init1 not found"
            #endif
        #elif ! defined(inotify_init1)
            __builtin_inotify_init1;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpoe24cu3x/testfile.c:9:10: fatal error: 'sys/inotify.h' file not found
#include <sys/inotify.h>
         ^~~~~~~~~~~~~~~
1 error generated.

Checking for function "inotify_init1" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_itoa || defined __stub___itoa
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &itoa;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpjtk0vedf/testfile.c:17:32: error: use of undeclared identifier 'itoa'
            void *a = (void*) &itoa;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(itoa) && !0
            #error "No definition for __builtin_itoa found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_itoa)
                #error "__builtin_itoa not found"
            #endif
        #elif ! defined(itoa)
            __builtin_itoa;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpn0gb67do/testfile.c:20:14: error: "No definition for __builtin_itoa found in the prefix"
            #error "No definition for __builtin_itoa found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpn0gb67do/testfile.c:25:18: error: "__builtin_itoa not found"
                #error "__builtin_itoa not found"
                 ^
2 errors generated.

Checking for function "itoa" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_log || defined __stub___log
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &log;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "log" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_log10 || defined __stub___log10
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &log10;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "log10" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_log10f || defined __stub___log10f
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &log10f;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "log10f" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_logf || defined __stub___logf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &logf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "logf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_lround || defined __stub___lround
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &lround;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "lround" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_lroundf || defined __stub___lroundf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &lroundf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "lroundf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_malloc || defined __stub___malloc
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &malloc;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "malloc" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_memcmp || defined __stub___memcmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &memcmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "memcmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_memcpy || defined __stub___memcpy
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &memcpy;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "memcpy" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_memmove || defined __stub___memmove
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &memmove;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "memmove" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_memset || defined __stub___memset
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &memset;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "memset" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/mman.h>
#include <limits.h>

        #if defined __stub_mprotect || defined __stub___mprotect
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &mprotect;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "mprotect" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <time.h>
#include <limits.h>

        #if defined __stub_nanosleep || defined __stub___nanosleep
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &nanosleep;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "nanosleep" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <poll.h>
#include <limits.h>

        #if defined __stub_poll || defined __stub___poll
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &poll;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "poll" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_pow || defined __stub___pow
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &pow;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "pow" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_powf || defined __stub___powf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &powf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "powf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <pthread.h>
#include <limits.h>

        #if defined __stub_pthread_set_name_np || defined __stub___pthread_set_name_np
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &pthread_set_name_np;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7x744ghz/testfile.c:17:32: error: use of undeclared identifier 'pthread_set_name_np'
            void *a = (void*) &pthread_set_name_np;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <pthread.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(pthread_set_name_np) && !0
            #error "No definition for __builtin_pthread_set_name_np found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_pthread_set_name_np)
                #error "__builtin_pthread_set_name_np not found"
            #endif
        #elif ! defined(pthread_set_name_np)
            __builtin_pthread_set_name_np;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmprqx_lh5y/testfile.c:20:14: error: "No definition for __builtin_pthread_set_name_np found in the prefix"
            #error "No definition for __builtin_pthread_set_name_np found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmprqx_lh5y/testfile.c:25:18: error: "__builtin_pthread_set_name_np not found"
                #error "__builtin_pthread_set_name_np not found"
                 ^
2 errors generated.

Checking for function "pthread_set_name_np" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <pthread.h>
#include <limits.h>

        #if defined __stub_pthread_setname_np || defined __stub___pthread_setname_np
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &pthread_setname_np;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpos_ft98u/testfile.c:17:32: error: use of undeclared identifier 'pthread_setname_np'
            void *a = (void*) &pthread_setname_np;
                               ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <pthread.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(pthread_setname_np) && !0
            #error "No definition for __builtin_pthread_setname_np found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_pthread_setname_np)
                #error "__builtin_pthread_setname_np not found"
            #endif
        #elif ! defined(pthread_setname_np)
            __builtin_pthread_setname_np;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7zgvc9rt/testfile.c:20:14: error: "No definition for __builtin_pthread_setname_np found in the prefix"
            #error "No definition for __builtin_pthread_setname_np found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7zgvc9rt/testfile.c:25:18: error: "__builtin_pthread_setname_np not found"
                #error "__builtin_pthread_setname_np not found"
                 ^
2 errors generated.

Checking for function "pthread_setname_np" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_putenv || defined __stub___putenv
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &putenv;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "putenv" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_qsort || defined __stub___qsort
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &qsort;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "qsort" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_realloc || defined __stub___realloc
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &realloc;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "realloc" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <strings.h>
#include <limits.h>

        #if defined __stub_rindex || defined __stub___rindex
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &rindex;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmps9leln9j/testfile.c:17:32: error: implicitly declaring library function 'rindex' with type 'char *(const char *, int)' [-Werror,-Wimplicit-function-declaration]
            void *a = (void*) &rindex;
                               ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmps9leln9j/testfile.c:17:32: note: include the header <strings.h> or explicitly provide a declaration for 'rindex'
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <strings.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(rindex) && !0
            #error "No definition for __builtin_rindex found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_rindex)
                #error "__builtin_rindex not found"
            #endif
        #elif ! defined(rindex)
            __builtin_rindex;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpb8oxkh30/testfile.c:20:14: error: "No definition for __builtin_rindex found in the prefix"
            #error "No definition for __builtin_rindex found in the prefix"
             ^
1 error generated.

Checking for function "rindex" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_round || defined __stub___round
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &round;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "round" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_roundf || defined __stub___roundf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &roundf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "roundf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_scalbn || defined __stub___scalbn
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &scalbn;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "scalbn" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_scalbnf || defined __stub___scalbnf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &scalbnf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "scalbnf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <semaphore.h>
#include <limits.h>

        #if defined __stub_sem_timedwait || defined __stub___sem_timedwait
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &sem_timedwait;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmppk9a4lci/testfile.c:17:32: error: use of undeclared identifier 'sem_timedwait'; did you mean 'sem_trywait'?
            void *a = (void*) &sem_timedwait;
                               ^~~~~~~~~~~~~
                               sem_trywait
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/semaphore.h:58:5: note: 'sem_trywait' declared here
int sem_trywait(sem_t *);
    ^
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <semaphore.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(sem_timedwait) && !0
            #error "No definition for __builtin_sem_timedwait found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_sem_timedwait)
                #error "__builtin_sem_timedwait not found"
            #endif
        #elif ! defined(sem_timedwait)
            __builtin_sem_timedwait;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpt006bz6i/testfile.c:20:14: error: "No definition for __builtin_sem_timedwait found in the prefix"
            #error "No definition for __builtin_sem_timedwait found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpt006bz6i/testfile.c:25:18: error: "__builtin_sem_timedwait not found"
                #error "__builtin_sem_timedwait not found"
                 ^
2 errors generated.

Checking for function "sem_timedwait" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_setenv || defined __stub___setenv
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &setenv;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "setenv" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <setjmp.h>
#include <limits.h>

        #if defined __stub_setjmp || defined __stub___setjmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &setjmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "setjmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <signal.h>
#include <limits.h>

        #if defined __stub_sigaction || defined __stub___sigaction
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &sigaction;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "sigaction" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_sin || defined __stub___sin
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &sin;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "sin" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_sinf || defined __stub___sinf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &sinf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "sinf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdio.h>
#include <limits.h>

        #if defined __stub_snprintf || defined __stub___snprintf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &snprintf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "snprintf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_sqrt || defined __stub___sqrt
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &sqrt;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "sqrt" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_sqrtf || defined __stub___sqrtf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &sqrtf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "sqrtf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdio.h>
#include <limits.h>

        #if defined __stub_sscanf || defined __stub___sscanf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &sscanf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "sscanf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <strings.h>
#include <limits.h>

        #if defined __stub_strcasecmp || defined __stub___strcasecmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strcasecmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strcasecmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_strchr || defined __stub___strchr
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strchr;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strchr" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_strcmp || defined __stub___strcmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strcmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strcmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_strdup || defined __stub___strdup
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strdup;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strdup" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_strlcat || defined __stub___strlcat
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strlcat;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpsk2yu1af/testfile.c:17:32: error: implicitly declaring library function 'strlcat' with type 'unsigned long (char *, const char *, unsigned long)' [-Werror,-Wimplicit-function-declaration]
            void *a = (void*) &strlcat;
                               ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpsk2yu1af/testfile.c:17:32: note: include the header <string.h> or explicitly provide a declaration for 'strlcat'
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(strlcat) && !0
            #error "No definition for __builtin_strlcat found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_strlcat)
                #error "__builtin_strlcat not found"
            #endif
        #elif ! defined(strlcat)
            __builtin_strlcat;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpylafjogt/testfile.c:20:14: error: "No definition for __builtin_strlcat found in the prefix"
            #error "No definition for __builtin_strlcat found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpylafjogt/testfile.c:25:18: error: "__builtin_strlcat not found"
                #error "__builtin_strlcat not found"
                 ^
2 errors generated.

Checking for function "strlcat" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_strlcpy || defined __stub___strlcpy
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strlcpy;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmplydc9htr/testfile.c:17:32: error: implicitly declaring library function 'strlcpy' with type 'unsigned long (char *, const char *, unsigned long)' [-Werror,-Wimplicit-function-declaration]
            void *a = (void*) &strlcpy;
                               ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmplydc9htr/testfile.c:17:32: note: include the header <string.h> or explicitly provide a declaration for 'strlcpy'
1 error generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(strlcpy) && !0
            #error "No definition for __builtin_strlcpy found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_strlcpy)
                #error "__builtin_strlcpy not found"
            #endif
        #elif ! defined(strlcpy)
            __builtin_strlcpy;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpkf87ltcz/testfile.c:20:14: error: "No definition for __builtin_strlcpy found in the prefix"
            #error "No definition for __builtin_strlcpy found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpkf87ltcz/testfile.c:25:18: error: "__builtin_strlcpy not found"
                #error "__builtin_strlcpy not found"
                 ^
2 errors generated.

Checking for function "strlcpy" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_strlen || defined __stub___strlen
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strlen;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strlen" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <strings.h>
#include <limits.h>

        #if defined __stub_strncasecmp || defined __stub___strncasecmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strncasecmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strncasecmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_strncmp || defined __stub___strncmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strncmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strncmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_strrchr || defined __stub___strrchr
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strrchr;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strrchr" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_strstr || defined __stub___strstr
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strstr;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strstr" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_strtod || defined __stub___strtod
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strtod;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strtod" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <string.h>
#include <limits.h>

        #if defined __stub_strtok_r || defined __stub___strtok_r
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strtok_r;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strtok_r" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_strtol || defined __stub___strtol
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strtol;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strtol" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_strtoll || defined __stub___strtoll
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strtoll;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strtoll" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_strtoul || defined __stub___strtoul
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strtoul;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strtoul" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_strtoull || defined __stub___strtoull
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &strtoull;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "strtoull" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <unistd.h>
#include <limits.h>

        #if defined __stub_sysconf || defined __stub___sysconf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &sysconf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "sysconf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/sysctl.h>
#include <limits.h>

        #if defined __stub_sysctlbyname || defined __stub___sysctlbyname
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &sysctlbyname;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 In file included from /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp70_75muu/testfile.c:9:
In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/sysctl.h:83:
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/ucred.h:101:2: error: unknown type name 'u_int'
        u_int   cr_version;             /* structure layout version */
        ^
In file included from /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp70_75muu/testfile.c:9:
In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/sysctl.h:85:
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:116:2: error: unknown type name 'u_int'
        u_int   p_estcpu;        /* Time averaged value of p_cpticks. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:121:2: error: unknown type name 'u_int'
        u_int   p_swtime;        /* Time swapped in or out. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:122:2: error: unknown type name 'u_int'
        u_int   p_slptime;       /* Time since last blocked. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:136:2: error: unknown type name 'u_char'; did you mean 'char'?
        u_char  p_priority;     /* Process priority. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:137:2: error: unknown type name 'u_char'; did you mean 'char'?
        u_char  p_usrpri;       /* User-priority based on p_cpu and p_nice. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:142:2: error: unknown type name 'u_short'; did you mean 'short'?
        u_short p_xstat;        /* Exit status for wait; also stop signal. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:143:2: error: unknown type name 'u_short'; did you mean 'short'?
        u_short p_acflag;       /* Accounting flags. */
        ^
8 errors generated.

Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <sys/sysctl.h>
        int main(void) {

        /* With some toolchains (MSYS2/mingw for example) the compiler
         * provides various builtins which are not really implemented and
         * fall back to the stdlib where they aren't provided and fail at
         * build/link time. In case the user provides a header, including
         * the header didn't lead to the function being defined, and the
         * function we are checking isn't a builtin itself we assume the
         * builtin is not functional and we just error out. */
        #if !0 && !defined(sysctlbyname) && !0
            #error "No definition for __builtin_sysctlbyname found in the prefix"
        #endif

        #ifdef __has_builtin
            #if !__has_builtin(__builtin_sysctlbyname)
                #error "__builtin_sysctlbyname not found"
            #endif
        #elif ! defined(sysctlbyname)
            __builtin_sysctlbyname;
        #endif
        return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 In file included from /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp4s5jkjgq/testfile.c:9:
In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/sysctl.h:83:
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/ucred.h:101:2: error: unknown type name 'u_int'
        u_int   cr_version;             /* structure layout version */
        ^
In file included from /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp4s5jkjgq/testfile.c:9:
In file included from /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/sysctl.h:85:
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:116:2: error: unknown type name 'u_int'
        u_int   p_estcpu;        /* Time averaged value of p_cpticks. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:121:2: error: unknown type name 'u_int'
        u_int   p_swtime;        /* Time swapped in or out. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:122:2: error: unknown type name 'u_int'
        u_int   p_slptime;       /* Time since last blocked. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:136:2: error: unknown type name 'u_char'; did you mean 'char'?
        u_char  p_priority;     /* Process priority. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:137:2: error: unknown type name 'u_char'; did you mean 'char'?
        u_char  p_usrpri;       /* User-priority based on p_cpu and p_nice. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:142:2: error: unknown type name 'u_short'; did you mean 'short'?
        u_short p_xstat;        /* Exit status for wait; also stop signal. */
        ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sys/proc.h:143:2: error: unknown type name 'u_short'; did you mean 'short'?
        u_short p_acflag;       /* Accounting flags. */
        ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmp4s5jkjgq/testfile.c:20:14: error: "No definition for __builtin_sysctlbyname found in the prefix"
            #error "No definition for __builtin_sysctlbyname found in the prefix"
             ^
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmp4s5jkjgq/testfile.c:25:18: error: "__builtin_sysctlbyname not found"
                #error "__builtin_sysctlbyname not found"
                 ^
10 errors generated.

Checking for function "sysctlbyname" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_tan || defined __stub___tan
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &tan;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "tan" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_tanf || defined __stub___tanf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &tanf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "tanf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_trunc || defined __stub___trunc
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &trunc;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "trunc" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <math.h>
#include <limits.h>

        #if defined __stub_truncf || defined __stub___truncf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &truncf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "truncf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdlib.h>
#include <limits.h>

        #if defined __stub_unsetenv || defined __stub___unsetenv
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &unsetenv;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "unsetenv" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdio.h>
#include <limits.h>

        #if defined __stub_vsnprintf || defined __stub___vsnprintf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &vsnprintf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "vsnprintf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <stdio.h>
#include <limits.h>

        #if defined __stub_vsscanf || defined __stub___vsscanf
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &vsscanf;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "vsscanf" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
#include <limits.h>

        #if defined __stub_wcscmp || defined __stub___wcscmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &wcscmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "wcscmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
#include <limits.h>

        #if defined __stub_wcsdup || defined __stub___wcsdup
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &wcsdup;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "wcsdup" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
#include <limits.h>

        #if defined __stub_wcslen || defined __stub___wcslen
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &wcslen;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "wcslen" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
#include <limits.h>

        #if defined __stub_wcsncmp || defined __stub___wcsncmp
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &wcsncmp;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "wcsncmp" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <wchar.h>
#include <limits.h>

        #if defined __stub_wcsstr || defined __stub___wcsstr
        fail fail fail this function is not going to work
        #endif
        
int main(void) {
            void *a = (void*) &wcsstr;
            long long b = (long long) a;
            return (int) b;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking for function "wcsstr" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: YES (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <windows.h>
        void bar(void) {
            sizeof(XINPUT_GAMEPAD_EX);
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpmfqi9kvk/testfile.c:9:10: fatal error: 'windows.h' file not found
#include <windows.h>
         ^~~~~~~~~~~
1 error generated.

Checking for type "XINPUT_GAMEPAD_EX" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <windows.h>
        void bar(void) {
            sizeof(XINPUT_STATE_EX);
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmphtqezvh3/testfile.c:9:10: fatal error: 'windows.h' file not found
#include <windows.h>
         ^~~~~~~~~~~
1 error generated.

Checking for type "XINPUT_STATE_EX" with dependencies -lm, -ldl, -liconv, dbus-1, , threads: NO (cached)
Using cached compile:
Cached command line:   

Code:
 
#define _DEFAULT_SOURCE
#define _GNU_SOURCE
#define _ISOC11_SOURCE
#define _ISOC99_SOURCE
#define _POSIX_C_SOURCE 200809L
#define _XOPEN_SOURCE 700
#undef __STRICT_ANSI__
#include <signal.h>
        void bar(void) {
            struct sigaction foo;
            foo.sa_sigaction;

        }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking whether type "struct sigaction" has member "sa_sigaction" : YES (cached)
Using cached compile:
Cached command line:   

Code:
 int main() { int x; return __atomic_load_n(&x, __ATOMIC_SEQ_CST); }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking if "__atomic_load_n test" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 int main() { int x; return __sync_lock_test_and_set(&x, 1); }
Cached compiler stdout:
 
Cached compiler stderr:
 
Checking if "__sync_lock_test_and_set test" : links: YES (cached)
Using cached compile:
Cached command line:   

Code:
 #include <linux/input.h> #ifndef EVIOCGNAME #error EVIOCGNAME() ioctl not available #endif \ int main(int argc, char** argv) {}
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpjnbzbrez/testfile.c:1:26: warning: extra tokens at end of #include directive [-Wextra-tokens]
#include <linux/input.h> #ifndef EVIOCGNAME #error EVIOCGNAME() ioctl not available #endif \ int main(int argc, char** argv) {}
                         ^
                         //
/Users/kyle/git/cppong/ECS/builddir/meson-private/tmpjnbzbrez/testfile.c:1:10: fatal error: 'linux/input.h' file not found
#include <linux/input.h> #ifndef EVIOCGNAME #error EVIOCGNAME() ioctl not available #endif \ int main(int argc, char** argv) {}
         ^~~~~~~~~~~~~~~
1 warning and 1 error generated.

Checking if "input events test" compiles: NO (cached)
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp177hyu1q
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp177hyu1q/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp177hyu1q/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework AudioToolbox 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpw5usqdi8
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpw5usqdi8/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpw5usqdi8/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework AudioUnit 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmprdi4p1wh
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmprdi4p1wh/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmprdi4p1wh/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework Carbon 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5xpugize
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5xpugize/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5xpugize/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework Cocoa 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpw_91a37c
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpw_91a37c/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpw_91a37c/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework CoreAudio 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpxb5mc0to
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpxb5mc0to/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpxb5mc0to/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework CoreFoundation 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5lxj1tjm
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5lxj1tjm/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5lxj1tjm/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework CoreGraphics 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7_liagzn
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7_liagzn/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7_liagzn/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework CoreServices 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5r8fjn6x
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5r8fjn6x/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp5r8fjn6x/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework ForceFeedback 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7oi7rdwz
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7oi7rdwz/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp7oi7rdwz/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework Foundation 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpsx8skw17
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpsx8skw17/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpsx8skw17/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework IOKit 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpn12e2v8f
Command line:  c++ /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpn12e2v8f/testfile.cpp -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpn12e2v8f/output.exe -O0 -fpermissive -Werror=implicit-function-declaration -framework QuartzCore 

Code:
 int main(void) { return 0; }
Compiler stdout:
 
Compiler stderr:
 
Run-time dependency appleframeworks found: YES (AudioToolbox, AudioUnit, Carbon, Cocoa, CoreAudio, CoreFoundation, CoreGraphics, CoreServices, ForceFeedback, Foundation, IOKit, QuartzCore)
Using cached compile:
Cached command line:   

Code:
 
        #include <X11/XKBlib.h>
        int main(void) {
            /* If it's not defined as a macro, try to use as a symbol */
            #ifndef XkbKeycodeToKeysym
                XkbKeycodeToKeysym;
            #endif
            return 0;
        }
Cached compiler stdout:
 
Cached compiler stderr:
 /Users/kyle/git/cppong/ECS/builddir/meson-private/tmp558xhg5s/testfile.c:6:17: warning: expression result unused [-Wunused-value]
                XkbKeycodeToKeysym;
                ^~~~~~~~~~~~~~~~~~
1 warning generated.

Header <X11/XKBlib.h> has symbol "XkbKeycodeToKeysym" with dependency x11: YES (cached)
Message: filesystem:  cocoa
Message: haptic:  iokit
Message: joystick:  iokit, virtual, hidapi, dummy
Message: loadso:  dlopen
Message: power:  macosx
Message: sensor:  dummy
Message: video:  opengl, opengl_es2, opengl_egl, opengl_cgl
Message: input:  
Message: audio_driver:  coreaudio, dummy
Message: video_driver:  cocoa, x11, x11_supports_generic_events, x11_has_xkbkeycodetokeysym, dummy
Message: video_render:  ogl, ogl_es2
Message: thread:  pthread
Message: timer:  unix
Configuring SDL_config.h using configuration
Objective-C compiler for the build machine: cc (clang 13.1.6)
Objective-C linker for the build machine: cc ld64 764
Objective-C compiler for the host machine: cc (clang 13.1.6)
Objective-C linker for the host machine: cc ld64 764
Build targets in project: 2
NOTICE: Future-deprecated features used:
 * 0.58.0: {'meson.get_cross_property'}
Subproject sdl2 finished.


Executing subproject sdl2_image 

Project name: sdl2-image
Project version: 2.0.5
C compiler for the host machine: cc (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C linker for the host machine: cc ld64 764
C compiler for the build machine: cc (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C linker for the build machine: cc ld64 764
Dependency sdl2 found: YES 2.0.20 (overridden)
Dependency libpng found: YES 1.6.37 (cached)
Dependency libjpeg found: YES 9.5.0 (cached)
Dependency libtiff-4 found: YES 4.3.0 (cached)
Build targets in project: 3
Subproject sdl2_image finished.


Executing subproject sdl2_mixer 

Project name: sdl2 mixer
Project version: undefined
C compiler for the host machine: cc (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C linker for the host machine: cc ld64 764
C compiler for the build machine: cc (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C linker for the build machine: cc ld64 764
Dependency sdl2 found: YES 2.0.20 (overridden)
Dependency ogg found: YES 1.3.5 (cached)
Dependency vorbis found: YES 1.3.7 (cached)
Dependency vorbisfile found: YES 1.3.7 (cached)
Build targets in project: 5
Subproject sdl2_mixer finished.


Executing subproject sdl2_ttf 

Project name: sdl2_ttf
Project version: 2.0.12
C compiler for the host machine: cc (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C linker for the host machine: cc ld64 764
C compiler for the build machine: cc (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C linker for the build machine: cc ld64 764
Library m found: YES
Dependency freetype2 found: YES 24.1.18 (cached)
Dependency sdl2 found: YES 2.0.20 (overridden)
Build targets in project: 6
Subproject sdl2_ttf finished.


Executing subproject glm 

Project name: glm
Project version: 0.9.9.8
C++ compiler for the host machine: c++ (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C++ linker for the host machine: c++ ld64 764
C++ compiler for the build machine: c++ (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C++ linker for the build machine: c++ ld64 764
Build targets in project: 6
Subproject glm finished.


Executing subproject flecs 

Project name: flecs
Project version: undefined
C compiler for the host machine: cc (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C linker for the host machine: cc ld64 764
C compiler for the build machine: cc (clang 13.1.6 "Apple clang version 13.1.6 (clang-1316.0.21.2.5)")
C linker for the build machine: cc ld64 764
Dependency threads found: YES unknown (cached)
Build targets in project: 8
Subproject flecs finished.

Build targets in project: 9

main 0.0.1

  Subprojects
    flecs     : YES
    glm       : YES
    sdl2      : YES 1 warnings
    sdl2_image: YES
    sdl2_mixer: YES
    sdl2_ttf  : YES

  User defined options
    backend   : ninja

Found ninja-1.11.0 at /opt/brew/bin/ninja
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpiwsvbt_a
Command line:  cc /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpiwsvbt_a/testfile.c -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpiwsvbt_a/output.obj -c -O0 -Werror=implicit-function-declaration -Werror=unknown-warning-option -Werror=unused-command-line-argument -Werror=ignored-optimization-argument --print-search-dirs 

Code:
 
Compiler stdout:
 programs: =/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
libraries: =/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6

Compiler stderr:
 
Running compile:
Working directory:  /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpkt1j4ef6
Command line:  cc /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpkt1j4ef6/testfile.m -o /Users/kyle/git/cppong/ECS/builddir/meson-private/tmpkt1j4ef6/output.obj -c -O0 -Werror=implicit-function-declaration -Werror=unknown-warning-option -Werror=unused-command-line-argument -Werror=ignored-optimization-argument --print-search-dirs 

Code:
 
Compiler stdout:
 programs: =/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
libraries: =/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.1.6

Compiler stderr:
 
Running compile:
Working directory:  /var/folders/py/pg8slmy57bs56bqbrbh_80dr0000gn/T/tmpf3ihwix_
Command line:  c++ /var/folders/py/pg8slmy57bs56bqbrbh_80dr0000gn/T/tmpf3ihwix_/testfile.cpp -o /var/folders/py/pg8slmy57bs56bqbrbh_80dr0000gn/T/tmpf3ihwix_/output.obj -c -std=c++20 

Code:
 int i = static_cast<int>(0);
Compiler stdout:
 
Compiler stderr:
 
Compiler accepts -std=c++20: YES
